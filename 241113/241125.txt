Nest.js

1) SSR VS CSR VS SSR
- 사전 렌더링

2) Page Rotuer
- 페이지 라우팅 방법(*폴더명)
- 캐치 올 세그먼트 (*동적 파라미터)
- 옵셔널 캐치 올 세그먼트(*동적 파라미터 + 파라미터 x)
- 네비게이션 
- 프리 패칭
- API 라우트
- 스타일링 > style.module.css
- 레이아웃 > 부모 > 자식 페이지 컴포넌트
- 데이터패칭
> SSR
> SSG
> ISR

3) App Router > 별도의 설정 => 서버 컴포넌트
- 페이지 라우팅 방법(*폴더명)
- 캐치 올 세그먼트 (*동적 파라미터)
- 옵셔널 캐치 올 세그먼트(*동적 파라미터 + 파라미터 x)
- 레이아웃 설정
- 서버 컴포넌트 & 클라이언트 컴포넌트
(*유저 > 클라이언트 > 서버 측 페이지 get // 사전렌더링 // 동적인 페이지
VS 정적인 페이지)
- 클라이언트 컴포넌트 > 서버 컴포넌트
> 데이터 패칭
> 데이터 캐시
- 무조건 캐시 저장 // 저장 x // revalidate저장
- 리퀘스트 메모이제이션

- 페이지 캐싱
> Full Route Cache(풀 라우트 캐시)
> next.js 서버가 데이터를 렌더링 하기 전  단계에서 데이터의 캐시값을 저장
및 정의 해놓은 기능

1) 정적인 페이지 (Static Page)
> 최초에 책 12권 정보
1) query /parameter x + 데이터 캐시 저장 o

2) 동적인 페이지 (Dynamic Page)
> query / parameter + 데이터 캐시 저장x
> query / parameter + 데이터 캐시 저장 
> query / parameter + 데이터 캐시 저장x

dynamicParams => 변수 및 속성
> 라우트 세그먼트 옵션!!!!
- 어떤 특정 컴포넌트 페이지를 강제적으로 Dynamic혹은 Static 속성으로
변환하는 방법

> Client Router Cache(클라이언트 라우터 캐시)
: 브라우저에 저장이 되는 캐시
: 클라이언트 컴포넌트 페이지 역시 서버 컴포넌트 페이지 처럼 유저가 특정 
페이지에 접속하게 되면 브라우저에 캐시값을 저장해놓아서 향후 동일한 
페이지를 방문하고자 했을 때 효율적이고, 빠르게 접속할 수 있도록 도와주는
역할

스트리밍 서비스 
> 동영상 용량 크다
> 동영상 대용량 한 번에 다 받아서 > 사용자에게 전달하려고 하면, 용량이 크
면 클수록 사용자가 기다려야함 => 로딩 비효율적으로 길어짐!!

100메가 > 해당 데이터를 불러온 만큼만 먼저 사용자에게 영상을 보여주고,
사용자가 영상을 보고 있는 시간동안 나머지 영상 데이터를 사용자에게 순차
적으로 제공

특정페이지 보여줘야하는 요소들이 많은 경우
> 알리익스프레스 동영상 //

스트리밍 서비스는 static 컴포넌트 페이지보다는 사용자에게 어떤 값을 받아서
출력 > 사전렌더링 시간을 더 많이 사용해야하는 Dynamic 컴포넌트 페이지에서
더 효율성을 발휘

3) App Router



